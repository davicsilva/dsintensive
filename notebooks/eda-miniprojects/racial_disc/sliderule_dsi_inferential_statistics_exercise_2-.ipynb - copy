{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Examining Racial Discrimination in the US Job Market\n",
    "\n",
    "### Background\n",
    "Racial discrimination continues to be pervasive in cultures throughout the world. Researchers examined the level of racial discrimination in the United States labor market by randomly assigning identical résumés to black-sounding or white-sounding names and observing the impact on requests for interviews from employers.\n",
    "\n",
    "### Data\n",
    "In the dataset provided, each row represents a resume. The 'race' column has two values, 'b' and 'w', indicating black-sounding and white-sounding. The column 'call' has two values, 1 and 0, indicating whether the resume received a call from employers or not.\n",
    "\n",
    "Note that the 'b' and 'w' values in race are assigned randomly to the resumes when presented to the employer."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercises\n",
    "You will perform a statistical analysis to establish whether race has a significant impact on the rate of callbacks for resumes.\n",
    "\n",
    "Answer the following questions **in this notebook below and submit to your Github account**. \n",
    "\n",
    "   1. What test is appropriate for this problem? Does CLT apply?\n",
    "   2. What are the null and alternate hypotheses?\n",
    "   3. Compute margin of error, confidence interval, and p-value.\n",
    "   4. Write a story describing the statistical significance in the context or the original problem.\n",
    "   5. Does your analysis mean that race/name is the most important factor in callback success? Why or why not? If not, how would you amend your analysis?\n",
    "\n",
    "You can include written notes in notebook cells using Markdown: \n",
    "   - In the control panel at the top, choose Cell > Cell Type > Markdown\n",
    "   - Markdown syntax: http://nestacms.com/docs/creating-content/markdown-cheat-sheet\n",
    "\n",
    "\n",
    "#### Resources\n",
    "+ Experiment information and data source: http://www.povertyactionlab.org/evaluation/discrimination-job-market-united-states\n",
    "+ Scipy statistical methods: http://docs.scipy.org/doc/scipy/reference/stats.html \n",
    "+ Markdown syntax: http://nestacms.com/docs/creating-content/markdown-cheat-sheet\n",
    "****"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Import the libs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Loading the data from a stata file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.io.stata.read_stata('data/us_job_market_discrimination.dta')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>ad</th>\n",
       "      <th>education</th>\n",
       "      <th>ofjobs</th>\n",
       "      <th>yearsexp</th>\n",
       "      <th>honors</th>\n",
       "      <th>volunteer</th>\n",
       "      <th>military</th>\n",
       "      <th>empholes</th>\n",
       "      <th>occupspecific</th>\n",
       "      <th>...</th>\n",
       "      <th>compreq</th>\n",
       "      <th>orgreq</th>\n",
       "      <th>manuf</th>\n",
       "      <th>transcom</th>\n",
       "      <th>bankreal</th>\n",
       "      <th>trade</th>\n",
       "      <th>busservice</th>\n",
       "      <th>othservice</th>\n",
       "      <th>missind</th>\n",
       "      <th>ownership</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>316</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>b</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>313</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>b</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>313</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Nonprofit</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 65 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  id ad  education  ofjobs  yearsexp  honors  volunteer  military  empholes  \\\n",
       "0  b  1          4       2         6       0          0         0         1   \n",
       "1  b  1          3       3         6       0          1         1         0   \n",
       "2  b  1          4       1         6       0          0         0         0   \n",
       "3  b  1          3       4         6       0          1         0         1   \n",
       "4  b  1          3       3        22       0          0         0         0   \n",
       "\n",
       "   occupspecific    ...      compreq  orgreq  manuf  transcom  bankreal trade  \\\n",
       "0             17    ...          1.0     0.0    1.0       0.0       0.0   0.0   \n",
       "1            316    ...          1.0     0.0    1.0       0.0       0.0   0.0   \n",
       "2             19    ...          1.0     0.0    1.0       0.0       0.0   0.0   \n",
       "3            313    ...          1.0     0.0    1.0       0.0       0.0   0.0   \n",
       "4            313    ...          1.0     1.0    0.0       0.0       0.0   0.0   \n",
       "\n",
       "  busservice othservice  missind  ownership  \n",
       "0        0.0        0.0      0.0             \n",
       "1        0.0        0.0      0.0             \n",
       "2        0.0        0.0      0.0             \n",
       "3        0.0        0.0      0.0             \n",
       "4        0.0        1.0      0.0  Nonprofit  \n",
       "\n",
       "[5 rows x 65 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dataset with résumés that received callbacks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>race</th>\n",
       "      <th>call</th>\n",
       "      <th>education</th>\n",
       "      <th>yearsexp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>b</td>\n",
       "      <td>w</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>b</td>\n",
       "      <td>w</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>b</td>\n",
       "      <td>w</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>b</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>b</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    id race  call  education  yearsexp\n",
       "85   b    w   1.0          2         7\n",
       "95   b    w   1.0          2         4\n",
       "105  b    w   1.0          4         6\n",
       "107  b    b   1.0          4         6\n",
       "126  b    b   1.0          4         9"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_calls = data[['id','race','call', 'education', 'yearsexp']].loc[data['call']==1]\n",
    "data_calls.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Callbacks for white and black-sounding names  (a summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total résumés = 4870 Curricula Vitae (CV)\n",
      "Total callbacks = 392 calls (8.05% all CV)\n",
      "...\n",
      "...Callback for with white-sounding name = 235 or 59.95% from CV with callbacks;\n",
      "...Callback for black-sounding name = 157 or 40.05% from CV with callbacks.\n",
      "...\n",
      "...Callback for white-sounding name is 33.19% greater than for black-sounding names\n"
     ]
    }
   ],
   "source": [
    "# total résumés in the dataset\n",
    "n = data.shape[0]\n",
    "\n",
    "# Callback / white/black-sounding name\n",
    "total_call = data['id'].loc[data['call'] ==1.0].count()\n",
    "call_w = data['id'].loc[(data['race'] =='w') & (data['call'] ==1.0)].count()\n",
    "call_b = data['id'].loc[(data['race'] =='b') & (data['call'] ==1.0)].count()\n",
    "\n",
    "# Summary\n",
    "print(\"Total résumés = %d Curricula Vitae (CV)\" % n)\n",
    "print(\"Total callbacks = %d calls (%.2f%% all CV)\" % (total_call,(100*(total_call/n))))\n",
    "print(\"...\")\n",
    "print(\"...Callback for with white-sounding name = %d or %.2f%% from CV with callbacks;\" % (call_w, (100*(call_w/total_call))))\n",
    "print(\"...Callback for black-sounding name = %d or %.2f%% from CV with callbacks.\" % (call_b, (100*(call_b/total_call))))\n",
    "print(\"...\")\n",
    "print(\"...Callback for white-sounding name is %.2f%% greater than for black-sounding names\" % (100*((call_w - call_b)/call_w)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Callbacks: a visual presentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10c714ef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create data\n",
    "label_call_w = \"white-sounding names - \" + '{:.5}'.format(str(100*(call_w/total_call))) +\"%\"\n",
    "label_call_b = \"black-sounding names - \" + '%.5s' % format(str(100*(call_b/total_call))) +\"%\"\n",
    "names= label_call_w, label_call_b\n",
    "size=[call_w, call_b]\n",
    " \n",
    "# Create a circle for the center of the plot\n",
    "inner_circle=plt.Circle( (0,0), 0.7, color='white')\n",
    "\n",
    "# Give color names\n",
    "plt.pie(size, labels=names, colors=['blue','skyblue'], labeldistance=1.0, wedgeprops = { 'linewidth' : 7, 'edgecolor' : 'white' })\n",
    "p=plt.gcf()\n",
    "p.gca().add_artist(inner_circle)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### 1.What test is appropriate for this problem? Does CLT apply?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We have a problem with variables that represents ***categorical values***: 'b', 'w'.<br>\n",
    "- For this type of analysis - **relationship of two categorical variables** -, their distribution in the dataset is often displayed in an **R×C table**, also referred to as a **contingency table** [1].\n",
    "- In order to do **hypothesis testing** with categorical variables we the **chi-square test** [1]."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Does CLT apply?\n",
    "?."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.What are the null and alternate hypotheses?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.1 - Null hypothesis: **H0 => \"Race has NOT a significant impact on the rate of callbacks for résumés\".**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.2 - Alternate hypothesis: **Ha => \"Race has a significant impact on the rate of callbacks for résumés\".**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Compute margin of error, confidence interval, and p-value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### About résumés with callback:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>race</th>\n",
       "      <th>call</th>\n",
       "      <th>education</th>\n",
       "      <th>yearsexp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>b</td>\n",
       "      <td>w</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>b</td>\n",
       "      <td>w</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>b</td>\n",
       "      <td>w</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>b</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>b</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    id race  call  education  yearsexp\n",
       "85   b    w   1.0          2         7\n",
       "95   b    w   1.0          2         4\n",
       "105  b    w   1.0          4         6\n",
       "107  b    b   1.0          4         6\n",
       "126  b    b   1.0          4         9"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dataframe with only the résumés with callback (data_calls)\n",
    "data_calls.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Barplot: 'race' versus 'callback'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a15dbb908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rc = data[['race','call']]\n",
    "sns.barplot(x='race', y='call', data=rc)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a15955eb8>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a15955e48>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set()\n",
    "\n",
    "# Plot tip as a function of toal bill across days\n",
    "g = sns.lmplot(x=\"yearsexp\", y=\"education\", hue=\"race\",\n",
    "               truncate=True, size=7, data=data_calls)\n",
    "\n",
    "# Use more informative axis labels than are provided by default\n",
    "g.set_axis_labels(\"Years of experience\", \"Years of formal education\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Arrays with callback:\n",
    "#... w_callback = white-sounding name\n",
    "#... b_callback = black-sounding name\n",
    "w_callback = data_calls.iloc[:, 1][data_calls.race == 'w'].values\n",
    "b_callback = data_calls.iloc[:, 1][data_calls.race == 'b'].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Calculate the T-test for the means of two independent samples [2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T-test : t_test = -4.1147052909\n",
      "P-value: p_value = 0.0000394294\n"
     ]
    }
   ],
   "source": [
    "# Filter rows by race ('w'or 'b') AND with callback (call=1)\n",
    "w_callback = data[data.race=='w'].call\n",
    "b_callback = data[data.race=='b'].call\n",
    "t_test, p_value = stats.ttest_ind(b_callback, w_callback, equal_var = False)\n",
    "\n",
    "print(\"T-test : t_test = %.10f\" %t_test)\n",
    "print(\"P-value: p_value = %.10f\" %p_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.1 - Margin of error or standard error is calculated by this formula:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![margin of error](images/img_marginerror_formula.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* For this exercice we will assume t-test as the **critical value** (z-score in the formula above)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Assuming a 95% level of confindence, we will have the following margin of error => +/- 4.85%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "Z = 1.96"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 392"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "P = 157/N"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "margin_error = (Z*((P*(1-P)/N)**0.5))*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Margin of error +/- 4.850771 percent\n"
     ]
    }
   ],
   "source": [
    "print(\"Margin of error +/- %f percent\" % margin_error)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3.2 - Confidence interval**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3.3 - P-value**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Write a story describing the statistical significance in the context or the original problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40.05102040816326"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# % callbacks for black-sounding names / calbacks\n",
    "(157/392)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What we have so far:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **~40%** of all candidates that received a call had a black-sounding names\n",
    "- **4.85%** margin of error (+/-)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on data, with 95% confidence, we know that 40% of the candidates that received a call has a black-sounding name. Considering a margin of error of +/-4.85%, we can not afirm that was a racial bias (pro white-sounding names). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Does your analysis mean that race/name is the most important factor in callback success? Why or why not? If not, how would you amend your analysis?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[1] \"Statistics in a Nutshell\", Boslaugh S., Watters A., O'Reilly (2008): https://www.amazon.com/Statistics-Nutshell-Desktop-Reference-OReilly/dp/0596510497/ref=sr_1_2?ie=UTF8&qid=1517168318&sr=8-2&keywords=Statistics+in+a+Nutshell%22%2C+Boslaugh "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[2] Documentation of \"Scipy.Stats.TTest_ind\": https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html#scipy.stats.ttest_ind "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
